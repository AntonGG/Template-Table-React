{"version":3,"sources":["redux/actions.js","redux/types.js","components/Table.js","components/App.js","serviceWorker.js","redux/tableReducer.js","redux/rootReducer.js","redux/store.js","index.js"],"names":["addData","payload","type","Table","this","props","dataArray","map","v","index","key","b","sum","count","price","s","handleTable","Component","mapDispatchToProps","connect","state","tableReducer","App","setInterval","Math","random","toFixed","floor","bind","className","Boolean","window","location","hostname","match","initialState","rootReducer","combineReducers","action","length","slice","store","createStore","compose","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"2QAEO,SAASA,EAAQC,GACtB,MAAO,CACLC,KCJoB,WDKpBD,W,IEFEE,E,4KAEW,IAAD,OACZ,OAAOC,KAAKC,MAAMC,UAAUC,KAAI,SAACC,EAAGC,GAClC,MAAwB,MAApB,EAAKJ,MAAMH,KAEX,wBAAIQ,IAAKD,GACP,4BAAKD,EAAEG,EAAEC,KACT,4BAAKJ,EAAEG,EAAEE,OACT,4BAAKL,EAAEG,EAAEG,QAKX,wBAAIJ,IAAKD,GACP,4BAAKD,EAAEO,EAAEH,KACT,4BAAKJ,EAAEO,EAAEF,OACT,4BAAKL,EAAEO,EAAED,a,+BAOjB,OACE,6BACE,+BACE,+BACE,4BACE,mEACA,4FACA,+DAGJ,+BAAQV,KAAKY,qB,GAlCHC,aA+CdC,EAAqB,CACzBlB,WAGamB,eAVS,SAAAC,GACtB,MAAO,CACLd,UAAWc,EAAMC,aAAaf,aAQMY,EAAzBC,CAA6ChB,GChDtDmB,E,kLAEFC,YACE,WAEEnB,KAAKC,MAAML,QAAQ,CACjB,CACEW,EAAG,CACDC,IAAKY,KAAKC,OAAO,KAAKC,QAAQ,GAC9Bb,MAAOW,KAAKC,OAAO,KAAKC,QAAQ,GAChCZ,MAAOU,KAAKG,MAAsB,IAAhBH,KAAKC,UAAmB,GAE5CV,EAAG,CACDH,IAAKY,KAAKC,OAAO,KAAKC,QAAQ,GAC9Bb,MAAOW,KAAKC,OAAO,KAAKC,QAAQ,GAChCZ,MAAOU,KAAKG,MAAsB,IAAhBH,KAAKC,UAAmB,OAIhDG,KAAKxB,MACP,O,+BAIF,OACE,yBAAKyB,UAAU,OACb,kBAAC,EAAD,CAAO3B,KAAM,MACb,kBAAC,EAAD,CAAOA,KAAM,W,GA3BHe,aAiCZC,EAAqB,CACzBlB,WAGamB,cAAQ,KAAMD,EAAdC,CAAkCG,GC/B7BQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,0BChBAC,EAAe,CACnB7B,UAAW,CAAC,CAAEK,EAAG,GAAII,EAAG,MCAbqB,EAAcC,YAAgB,CACzChB,aDE0B,WAAmC,IAAlCD,EAAiC,uDAAzBe,EAAcG,EAAW,uCAC5D,OAAQA,EAAOpC,MACb,IJRoB,WISlB,OAAIkB,EAAMd,UAAUiC,OAAS,EACpB,eACFnB,EADL,CAEEd,UAAU,GAAD,mBAAMgC,EAAOrC,SAAb,YAAyBmB,EAAMd,UAAUkC,MAAM,EAAE,OAGrD,eAAKpB,EAAZ,CAAmBd,UAAU,GAAD,mBAAMgC,EAAOrC,SAAb,YAAyBmB,EAAMd,cAE/D,QACE,OAAOc,MEREqB,EAPDC,YACZN,EACAO,YACEZ,OAAOa,8BAAgCb,OAAOa,iCCElDC,IAASC,OACP,kBAAC,IAAD,CAAUL,MAAOA,GACf,kBAAC,EAAD,OAEFM,SAASC,eAAe,SJuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.cd7404e9.chunk.js","sourcesContent":["import { ADD_DATA } from \"./types\";\n\nexport function addData(payload) {\n  return {\n    type: ADD_DATA,\n    payload\n  };\n}\n","export const ADD_DATA = \"ADD_DATA\";\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { addData } from \"../redux/actions\";\nclass Table extends Component {\n  \n  handleTable() {\n    return this.props.dataArray.map((v, index) => {\n      if (this.props.type === \"b\") {\n        return (\n          <tr key={index}>\n            <td>{v.b.sum}</td>\n            <td>{v.b.count}</td>\n            <td>{v.b.price}</td>\n          </tr>\n        );\n      } else\n        return (\n          <tr key={index}>\n            <td>{v.s.sum}</td>\n            <td>{v.s.count}</td>\n            <td>{v.s.price}</td>\n          </tr>\n        );\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        <table>\n          <thead>\n            <tr>\n              <th>Сумма(BTC)</th>\n              <th>Количество</th>\n              <th>Цена(USD)</th>\n            </tr>\n          </thead>\n          <tbody>{this.handleTable()}</tbody>\n        </table>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    dataArray: state.tableReducer.dataArray\n  };\n};\n\nconst mapDispatchToProps = {\n  addData\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Table);\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Table from \"./Table\";\nimport { connect } from \"react-redux\";\nimport { addData } from \"../redux/actions\";\n\nclass App extends Component {\n  componentDidMount() {\n    setInterval(\n      function() {\n        //сюда вставить апишку\n        this.props.addData([\n          {\n            b: {\n              sum: Math.random(123).toFixed(5),\n              count: Math.random(123).toFixed(5),\n              price: Math.floor(Math.random() * 6000) + 1\n            },\n            s: {\n              sum: Math.random(123).toFixed(5),\n              count: Math.random(123).toFixed(5),\n              price: Math.floor(Math.random() * 6000) + 1\n            }\n          }\n        ]);\n      }.bind(this),\n      1000\n    );\n  }\n  render() {\n    return (\n      <div className=\"App\">\n        <Table type={\"b\"}></Table>\n        <Table type={\"s\"}></Table>\n      </div>\n    );\n  }\n}\n\nconst mapDispatchToProps = {\n  addData\n};\n\nexport default connect(null, mapDispatchToProps)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { ADD_DATA } from \"./types\";\n\nconst initialState = {\n  dataArray: [{ b: {}, s: {} }]\n};\n\nexport const tableReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case ADD_DATA:\n      if (state.dataArray.length > 4) {\n        return {\n          ...state,\n          dataArray: [...action.payload, ...state.dataArray.slice(0,4)]\n        };\n      } else {\n        return { ...state, dataArray: [...action.payload, ...state.dataArray] };\n      }\n    default:\n      return state;\n  }\n};\n","import { combineReducers } from \"redux\";\nimport { tableReducer } from \"./tableReducer\";\n\nexport const rootReducer = combineReducers({\n  tableReducer\n});\n","import { createStore, compose } from \"redux\";\nimport { rootReducer } from \"./rootReducer\";\n\nconst store = createStore(\n  rootReducer,\n  compose(\n    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n  )\n);\n\nexport default store;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./components/App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { Provider } from \"react-redux\";\nimport store from \"./redux/store\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}